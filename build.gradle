apply plugin: 'java-library'
apply plugin: 'application'
//apply plugin: 'org.gradle.java.experimental-jigsaw'
//apply plugin: 'com.dua3.gradle.jpms'

/*buildscript {
    dependencies {
        //classpath 'com.dua3.gradle.jpms:JpmsGradlePlugin:1.1.5'
        //classpath "gradle.plugin.org.gradle.java:experimental-jigsaw:0.1.1"
    }
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
}*/

repositories {
    mavenCentral()
}

dependencies {
    implementation('io.vertx:vertx-core:4.0.2')
}

/*ext.moduleName = 'org.example.kp'
compileJava {
    inputs.property('moduleName', moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}*/

task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = 'org.example.kp.DeployMainVerticle'

    // arguments to pass to the application
     args 'Prashant'
}

jar {
    manifest {
        attributes('Main-Class': 'org.example.kp.DeployMainVerticle')
    }
}

task customFatJar(type: Jar) {
    manifest {
        attributes 'Main-Class': 'org.example.kp.DeployMainVerticle'
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}

task runExecutableJar(type: JavaExec) {
    // Executable jars can have only _one_ jar on the classpath.
    classpath = files(tasks.jar)

    // 'main' does not need to be specified

    // arguments to pass to the application
     args 'Prashant'
}


java.modularity.inferModulePath.set(true)

application.mainModule.set('org.example.kp')
application.mainClass.set('org.example.kp.DeployMainVerticle')


